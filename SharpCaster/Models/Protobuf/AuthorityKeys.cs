// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authority_keys.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Extensions.Api.CastChannel.Proto {

  /// <summary>Holder for reflection information generated from authority_keys.proto</summary>
  public static partial class AuthorityKeysReflection {

    #region Descriptor
    /// <summary>File descriptor for authority_keys.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuthorityKeysReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRhdXRob3JpdHlfa2V5cy5wcm90bxIhZXh0ZW5zaW9ucy5hcGkuY2FzdF9j",
            "aGFubmVsLnByb3RvIoMBCg1BdXRob3JpdHlLZXlzEkIKBGtleXMYASADKAsy",
            "NC5leHRlbnNpb25zLmFwaS5jYXN0X2NoYW5uZWwucHJvdG8uQXV0aG9yaXR5",
            "S2V5cy5LZXkaLgoDS2V5EhMKC2ZpbmdlcnByaW50GAEgASgMEhIKCnB1Ymxp",
            "Y19rZXkYAiABKAxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Extensions.Api.CastChannel.Proto.AuthorityKeys), global::Extensions.Api.CastChannel.Proto.AuthorityKeys.Parser, new[]{ "Keys" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Extensions.Api.CastChannel.Proto.AuthorityKeys.Types.Key), global::Extensions.Api.CastChannel.Proto.AuthorityKeys.Types.Key.Parser, new[]{ "Fingerprint", "PublicKey" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AuthorityKeys : pb::IMessage<AuthorityKeys> {
    private static readonly pb::MessageParser<AuthorityKeys> _parser = new pb::MessageParser<AuthorityKeys>(() => new AuthorityKeys());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthorityKeys> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Extensions.Api.CastChannel.Proto.AuthorityKeysReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthorityKeys() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthorityKeys(AuthorityKeys other) : this() {
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthorityKeys Clone() {
      return new AuthorityKeys(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Extensions.Api.CastChannel.Proto.AuthorityKeys.Types.Key> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Extensions.Api.CastChannel.Proto.AuthorityKeys.Types.Key.Parser);
    private readonly pbc::RepeatedField<global::Extensions.Api.CastChannel.Proto.AuthorityKeys.Types.Key> keys_ = new pbc::RepeatedField<global::Extensions.Api.CastChannel.Proto.AuthorityKeys.Types.Key>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Extensions.Api.CastChannel.Proto.AuthorityKeys.Types.Key> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthorityKeys);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthorityKeys other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthorityKeys other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AuthorityKeys message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Key : pb::IMessage<Key> {
        private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Key> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Extensions.Api.CastChannel.Proto.AuthorityKeys.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key(Key other) : this() {
          fingerprint_ = other.fingerprint_;
          publicKey_ = other.publicKey_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Key Clone() {
          return new Key(this);
        }

        /// <summary>Field number for the "fingerprint" field.</summary>
        public const int FingerprintFieldNumber = 1;
        private pb::ByteString fingerprint_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Fingerprint {
          get { return fingerprint_; }
          set {
            fingerprint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "public_key" field.</summary>
        public const int PublicKeyFieldNumber = 2;
        private pb::ByteString publicKey_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PublicKey {
          get { return publicKey_; }
          set {
            publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Key);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Key other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Fingerprint != other.Fingerprint) return false;
          if (PublicKey != other.PublicKey) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Fingerprint.Length != 0) hash ^= Fingerprint.GetHashCode();
          if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Fingerprint.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Fingerprint);
          }
          if (PublicKey.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(PublicKey);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Fingerprint.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Fingerprint);
          }
          if (PublicKey.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Key other) {
          if (other == null) {
            return;
          }
          if (other.Fingerprint.Length != 0) {
            Fingerprint = other.Fingerprint;
          }
          if (other.PublicKey.Length != 0) {
            PublicKey = other.PublicKey;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Fingerprint = input.ReadBytes();
                break;
              }
              case 18: {
                PublicKey = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
